<?php

class FirstClass1 {

    public function __get($name) {
        $method_name = 'get' . ucfirst($name);
        return $this->$method_name();
    }

    public function __set($name, $value) {
        $method_name = 'set' . ucfirst($name);
        $this->$method_name($value);
    }

}

class TableCell1 {

    public $header;
    public $class;
    public $value;

    public function __construct($header, $class, $data) {
        $this->header = $header;
        $this->class = $class;
        $this->data = $data;
    }

}

class MenuItem1 extends FirstClass1 {

    public $raw;

    function setTitle($title) {
        $this->raw['title'] = $title;
        return $this;
    }
    
    /**
     * <b>"type"</b>: A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
     * <ul>
     * <li>MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.</li>
     * <li>MENU_CALLBACK: Callbacks simply register a path so that the correct information is generated when the path is accessed.</li>
     * <li>MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.</li>
     * <li>MENU_LOCAL_ACTION: Local actions are menu items that describe actions on the parent item such as adding a new user or block, and are rendered in the action-links list in your theme.</li>
     * <li>MENU_LOCAL_TASK: Local tasks are menu items that describe different displays of data, and are generally rendered as tabs.</li>
     * <li>MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, which should display the same page as the parent item.</li>
     * </ul>
     * @param type $type
     * @return \MenuItem1
     */
    function setType($type) {
        $this->raw['type'] = $type;
        return $this;
    }
    
    function setPageCallback($callback) {
        $this->raw['page callback'] = $callback;
        return $this;
    }
    
    function setAccessCallback($accessCallback) {
        $this->raw['access callback'] = $accessCallback;
        return $this;
    }
    
    function setAccessArguments($accessArguments) {
        $this->raw['access arguments'] = $accessArguments;
        return $this;
    }

}

class FormControl1 {
    public $raw;
    
    function setTitle($title) {
        $this->raw['#title'] = $title;
        return $this;
    }
    
    function setDefaultValue($value) {
        $this->raw['#default_value'] = $value;
        return $this;
    }
    
    function setValue($value) {
        $this->raw['#value'] = $value;
        return $this;
    }
    
    function setDescription($description) {
        $this->raw['#description'] = $description;
        return $this;
    }
    
    function setDisabled($disabled) {
        $this->raw['#disabled'] =(bool) $disabled;
        return $this;
    }
}

class FormSelect1 extends FormControl1 {
    public function __construct() {
        $this->raw['#type'] = 'select';
    }
    
    /**
     * @param array $options Associative map option_id => option_title
     */
    function setOptions($options) {
        $this->raw['#options'] = $options;
        return $this;
    }
}
