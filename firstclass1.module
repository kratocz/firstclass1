<?php

class FirstClass1 {

    public function __get($name) {
        $method_name = 'get' . ucfirst($name);
        return $this->$method_name();
    }

    public function __set($name, $value) {
        $method_name = 'set' . ucfirst($name);
        $this->$method_name($value);
    }

}

/**
 * @property-read array $raw Raw Drupal array encapsulated by this class
 */
class FirstClass1Raw extends FirstClass1 {

    public $raw;

    public function __construct(&$raw = array()) {
        if (!is_null($raw)) {
            if (is_object($raw)) {
                assert(get_class($raw) == get_class($this));
                $this->raw = $raw->raw;
            } else {
                assert(is_array($raw));
                $this->raw = &$raw;
            }
        }
    }

}

class TableCell1 {

    public $header;
    public $class;
    public $value;

    public function __construct($header, $class, $data) {
        $this->header = $header;
        $this->class = $class;
        $this->data = $data;
    }

}

class MenuItem1 extends FirstClass1Raw {

    function setTitle($title) {
        $this->raw['title'] = $title;
        return $this;
    }

    /**
     * <b>"type"</b>: A bitmask of flags describing properties of the menu item. Many shortcut bitmasks are provided as constants in menu.inc:
     * <ul>
     * <li>MENU_NORMAL_ITEM: Normal menu items show up in the menu tree and can be moved/hidden by the administrator.</li>
     * <li>MENU_CALLBACK: Callbacks simply register a path so that the correct information is generated when the path is accessed.</li>
     * <li>MENU_SUGGESTED_ITEM: Modules may "suggest" menu items that the administrator may enable.</li>
     * <li>MENU_LOCAL_ACTION: Local actions are menu items that describe actions on the parent item such as adding a new user or block, and are rendered in the action-links list in your theme.</li>
     * <li>MENU_LOCAL_TASK: Local tasks are menu items that describe different displays of data, and are generally rendered as tabs.</li>
     * <li>MENU_DEFAULT_LOCAL_TASK: Every set of local tasks should provide one "default" task, which should display the same page as the parent item.</li>
     * </ul>
     * @param type $type
     * @return \MenuItem1
     */
    function setType($type) {
        $this->raw['type'] = $type;
        return $this;
    }

    function setPage($callback = NULL, $arguments = NULL) {
        if ($callback !== NULL) {
            $this->raw['page callback'] = $callback;
        }
        if ($arguments !== NULL) {
            $this->raw['page arguments'] = $arguments;
        }
        return $this;
    }

    function setAccess($callback = NULL, $arguments = NULL) {
        if ($callback !== NULL) {
            $this->raw['access callback'] = $callback;
        }
        if ($arguments !== NULL) {
            if (!is_array($arguments)) {
                $arguments = (array) $arguments;
            }
            $this->raw['access arguments'] = $arguments;
        }
        return $this;
    }

    function setWeight($weight) {
        assert(is_numeric($weight));
        $this->raw['weight'] = $weight;
        return $this;
    }

}

/**
 * @property-write String $title
 * @property-write misc $defaultValue
 * @property-write misc $value
 * @property-write String $description
 * @property-write boolean $disabled
 */
class FormControl1 extends FirstClass1Raw {

    function setTitle($title) {
        $this->raw['#title'] = $title;
        return $this;
    }

    function setDefaultValue($value) {
        $this->raw['#default_value'] = $value;
        return $this;
    }

    function setValue($value) {
        $this->raw['#value'] = $value;
        return $this;
    }

    function setDescription($description) {
        $this->raw['#description'] = $description;
        return $this;
    }

    function setDisabled($disabled) {
        $this->raw['#disabled'] = (bool) $disabled;
        return $this;
    }

}

class FormSelect1 extends FormControl1 {

    public function __construct() {
        parent::__construct();
        $this->raw['#type'] = 'select';
    }

    /**
     * @param array $options Associative map option_id => option_title
     */
    function setOptions($options) {
        $this->raw['#options'] = $options;
        return $this;
    }

}
